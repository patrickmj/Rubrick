
<?php




ARC2::inc('Resource');


class PMJ_ResourcePlusPlugin extends ARC2_Resource
{
	function __construct($a = '', &$caller) 
	{
		parent::__construct($a, $caller);
	}

	function PMJ_ResourcePlusPlugin ($a = '', &$caller) 
	{
		$this->__construct($a, $caller);
	}

	function __init() 
	{
		parent::__init();
	}


	/**
	 * mergeIndex
	 * @param array $index
	 * @return boolean
	*/

	public function mergeIndex($index)
	{
		$matched = false;
		foreach($index as $sURI=>$pArray) {
			if($sURI == $this->uri) {
				$matched = true;
				$newIndex[$sURI] = $pArray;
				$this->index = ARC2::getMergedIndex($this->index, $newIndex );
			}
		}
		return $matched;
	}

	/**
	 * triplesCount
	 * @return integer
	*/

	public function triplesCount()
	{
		$count = 0;
		foreach($this->index[$this->uri] as $p=>$oArray) {
			$count = $count + count($oArray);
		}
		return $count;
	}


	/**
	 * hasNamespace
	 * @param string $ns
	 * @return boolean
	*/

	public function hasNamespace($ns)
	{
		$ns = $this->expandPName($ns);
		return (boolean) strpos($this->uri, $ns) ;
	}


	/**
	 * addPrefix
	 * @param string $prefix
	 * @param string $uri
	*/

	public function addPrefix($prefix, $uri)
	{
		if ( ! array_key_exists($prefix, $this->ns)) {
			$this->ns[$prefix] = $uri;
		}
	}

	/**
	 * mergeResource
	 * @param PMJ_ResourcePlus $res
	*/

	public function mergeResource($res)
	{
		if($res->uri != $this->uri) {
			$this->addError('Resource uris must match');
			return false;
		}
		$this->index = ARC2::getMergedIndex($res->index, $this->index);
		foreach ($res->ns as $prefix=>$uri) {
			$this->addPrefix($prefix, $uri);
		}
	}


	/**
	 * getTypes
	 * get all the classes the resource belongs to
	 * @return Array
	*/

	public function getTypes()
	{
		return $this->flattenObjects($this->getProps('rdfs:type') );
	}


	/**
	 * hasType
	 * @param string $type
	 * @return boolean
	*/

	public function hasType($type)
	{
		$types = $this->getTypes('rdfs:type');
		return in_array($this->expandPName($type), $types);
	}


	/**
	 * addPropValue
	 * add a predicate and object to the resource
	 * @param string $p the property
	 * @param mixed $o the object. either an array in the usual form, or just a string either literal or uri
	 * @param string $type type object type defaults to uri
	 * @param string $dt the datatype (optional)
	 * @param string $l the languae for a literal (optional)
	*/

	public function addPropValue($p, $o, $type = 'uri', $dt = null, $l = null)
	{

		$p = $this->expandPName($p);		
		$dt = $this->expandPName($dt);

		if( ! is_array($o) ) {
			if($type == 'uri') {
				$o = $this->expandPName($o);
			}

			$o = array('value' => $o, 'type' => $type );
		}

		if ($dt != null ) {
			$o['datatype'] = $dt;
		}

		if ($l != null ) {
			$o['lang'] = $l;
		}

		//make an index of it and merge, so that ARC2 will take care of duplicates for me.

		$newIndex[$this->uri] = array($p=>array($o));
		$this->mergeIndex($newIndex);

	}


		
	/**
	 * removeProp
	 * @param string $p
	 * 
	*/
	
	public function removeProp($p)
	{

		if ($this->hasProp($p)) {
			$p = $this->expandPName($p);
			unset($this->index[$this->uri][$p]);
		}

	}


	/**
	 * removePropValue
	 * @param string $p the property
	 * @param string $o the value of the object
	*/

	public function removePropValue($p, $o)
	{

		if ( ! $this->hasProp($p)) {
			return false;
		}
		$p = $this->expandPName($p);
		$o = $this->expandPName($o);
		foreach ($this->index[$this->uri][$p] as $i=>$object) {
			if($object['value'] == $o ) {

				unset($this->index[$this->uri][$p][$i]) ; 				
			}
		}
	}


	/**
	 * removeObjectsWithLang
	 * @param string $l the language to remove
	*/

	public function removeValuesWithLang($l)
	{
		foreach($this->index[$this->uri] as $p => $oArray) {
			foreach($oArray as $oIndex=>$o) {
				if (isset($o['lang']) && $o['lang'] == $l )  unset($this->index[$this->uri][$p][$oIndex]);
			}
		}
	}


	/**
	 * removeObjectsWithoutLang
	 * @param string $l the language to keep
	*/

	public function removeValuesWithoutLang($l)
	{
		foreach($this->index[$this->uri] as $p => $oArray) {
			foreach($oArray as $oIndex=>$o) {
				if (isset($o['lang']) && $o['lang'] != $l) unset($this->index[$this->uri][$p][$oIndex]);
			}
		}
	}



	/**
	 * removeProps
	 * @param array $propArray
	*/

	public function removeProps($propArray)
	{
		foreach ($propArray as $p) {
			$this->removeProp($p);
		}
	}




	/**
	 * function hasProp
	 * @param string $p
	 * @return boolean
	*/

	public function hasProp($p)
	{
		$p = $this->expandPName($p);
		return isset($this->index[$this->uri][$p]);

	}

	/**
	 * hasPropValueLang
	 * @param string name
	 * @return boolean
	*/

	public function hasPropLang($p, $l)
	{
		$p = $this->expandPName($p);
		$props = $this->getProps($p);
		if(count($props) == 0 ) return false;
		foreach ($props as $o) {
			if( isset($o['lang']) && $o['lang'] == $l) return true;
		}
		return false;
	}



	/**
	 * hasPropValueDatatype
	 * @param st name
	 * @return boolean
	*/

	public function hasPropDatatype($p, $dt)
	{
		$p = $this->expandPName($p);
		$dt = $this->expandPName($dt);
		$props = $this->getProps($p);
		if(count($props) == 0 ) return false;
		foreach ($props as $o) {
			if( isset($o['datatype']) && $o['datatype'] == $dt) return true;
		}
		return false;
	}


	/**
	 * removePropByNamespace
	 * @param string $ns
	*/

	public function removePropsByNamespace($ns)
	{
		if ( array_key_exists($ns, $this->ns)) $ns = $this->ns[$ns];

		foreach ($this->index[$this->uri] as $p=>$o) {
			if( strpos($p, $ns) !== false) {
				unset($this->index[$this->uri][$p]);
			}
		}
	}


	public function getPropsAsResourceGraph($p)
	{
		$g = ARC2::getComponent('PMJ_ResourceGraphPlugin', array('ns' => $this->ns));
		$oArray = $this->getProps($p);
		foreach($oArray as $o ) {
			if($o['type'] == 'uri') {
				$newRes = ARC2::getComponent('PMJ_ResourcePlusPlugin', array('ns' => $this->ns));
				$newRes->setURI($o['value']);
				$g->addResource($newRes);
			}		
		}
		return $g;
	}

	
	public function getFlattenedProps($p)
	{
		return $this->flattenObjects($this->getProps($p) );
	}

	public function flattenObjects($oArray)
	{
		$retArray = array();
		foreach($oArray as $o) {
			$retArray[] = $o['value'];
		}
		return $retArray;
	}



	function toNTriples() {		
		$ser = ARC2::getNTriplesSerializer(array('ns' => $this->ns));
		return $ser->getSerializedIndex($this->index);
	}

	function toTurtle() {
		$ser = ARC2::getTurtleSerializer(array('ns' => $this->ns));
		return $ser->getSerializedIndex($this->index);
	}

	function toRDFXML() {
		$ser = ARC2::getRDFXMLSerializer(array('ns' => $this->ns));
		return $ser->getSerializedIndex($this->index);
	}

	function toRDFJSON() {
		$ser = ARC2::getRDFJSONSerializer(array('ns' => $this->ns));
		return $ser->getSerializedIndex($this->index);
	}

	function toExhibitJSON() {
		$ser = ARC2::getComponent('ARC2_ExhibitJsonSerializerPlugin', array('ns'=>$this->ns));
		return $ser->getSerializedIndex($this->index);
	}

}




?>
